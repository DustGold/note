### docker概念

镜像images相当于模板，容器container相当于模板实例化出来的实例。

镜像存储分为本地仓库和远程仓库。仓库中只能存放镜像，不能存放容器。要上传到仓库需要先把容器commit为镜像。

每个镜像有3个主要属性：所在仓库REPOSITORY、标签 TAG、ID号IMAGE ID。

ID可以唯一标识一个镜像，REPOSITORY:TAG也能唯一标识一个镜像。

### docker基本命令

```sh
#查看镜像，会显示IMAGE_ID、REPOSITORY、TAG
docker images 

# 查看容器
docker ps 

# 创建容器 (以镜像为模板) # 进入后命令行显示[root@容器id]
docker run  -it 【REPOSITORY:TAG】 /bin/bash 

# 退出容器
exit 或Ctrl+D 

# 容器形成镜像  
docker commit [OPTIONS] CONTAINER_ID [REPOSITORY[:TAG]]
# 为方便使用，我们要求把TAG以其容器中软件版本命名，越详细越好，方便我们分辨
#如nocuda-python6-tf1.12。这样REPOSITORY[:TAG]表示为oucvisionlab/docker-repository:

# 打标签，相当于复制且重命名镜像，方便指定上传的仓库
docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]

# 进入运行中的容器
docker exec -it 容器ID  /bin/bash

#根据Dpckerfile创建镜像
docker build 

# 删除镜像
docker image rm 
```

```sh
# 1. 登录阿里云Docker Registry 
sudo docker login --username=韩锋626 registry.cn-qingdao.aliyuncs.com
输入密码 visionlab2020
# username中有中文是若干年前创建阿里云账号的时候不小心舔的中文,更改不了，所以

#3. 将镜像推送到Registry
sudo docker login --username=韩锋626 registry.cn-qingdao.aliyuncs.com
输入密码 visionlab2020

sudo docker tag [ImageId] registry.cn-qingdao.aliyuncs.com/oucvisionlab/docker-repository:[镜像版本号]

docker tag [ImageId] registry.cn-qingdao.aliyuncs.com/oucvisionlab/docker-repository:[镜像版本号]

$ sudo docker push registry.cn-qingdao.aliyuncs.com/oucvisionlab/docker-repository:[镜像版本号]

# 2. 从Registry中拉取镜像
sudo docker pull registry.cn-qingdao.aliyuncs.com/oucvisionlab/docker-repository:[镜像版本号]


```



### Dockerfile

Dockerfile镜像描述文件

- 是一个包含组合镜像的命令的文本文档
- Docker通过读取Dockerfile中的指令按步自动生成镜像



```sh
FROM #基准镜像
FROM scratch # 不依赖任何镜像标准
MAINTAINER # 说明信息
# LABEL version= # 版本信息 
LABEL description =
WORKDIR  # cd
ADD 本地  镜像目录 # 复制、添加远程文件
ENV  JAVA_HOME /usr/local/openjdk8 # 覆盖环境变量
RUN ${JAVA_HOME}/bin/jva -jhar test.jar


RUN["echo","123"]

EXPOSE 7000 # 暴露端口
```

例子

```sh
RUN #在docker build构建时执行命令
RUN yum install -y vim # Shell命令格式
RUN ["yum","install","-y","vim"] # Exec命令格式，推荐
#shell方式
# 使用shell执行时，当前shell是父进程，生成一个子shell进程
#在子shell进程执行脚本，脚本执行完毕，退出子shell，回到当前shell
# 使用Exec方式，会用Exec进程替换当前进程，并且保持PID不变。执行完毕，直接退出，并不会退出之前的父进程环境

ENTRYPOINT # 在docker run构建容器 容器启动时执行的命令 # Dockerfile中只有最后一个ENTRYPOINT会被执行
ENTRYPOINT ["ps"] #推荐使用Exec格式

CMD # 容器启动后执行默认的命令或参数
# Dockerfile中只有最后一个CMD会被执行
# 如容器启动时附加指令，则CMD被忽略  docker run ... ls
CMD ["ps","-ef"] #推荐使用Exec格式

ENTRYPOINT可以和CMD组合使用  如ps  -ef


```

例如

在我们外部目录的当前目录有如下文件  docker-web/index.html

```html
<!--index.html-->
<h1>123</h1>
```

在docker-web同级目录下还有个Dockerfile文件，没有扩展名

```dockerfile
FROM tomcat:lastest # 基本镜像
MAINTAINER haha.com  # 要制作镜像的描述信息
WORKDIR /usr/local/tomcat/webapps  #cd # 目录不存在就创建
ADD docker-web ./docher-web  # 从外部目录复制到镜像目录  # 可以同时重命名  
```

在命令行下cd到Dockerfile同级目录

```sh
docker build -t 机构/镜像名<:tags> 生成Dockerfile目录 # 对Dockerfile进行解析，生成我们需要镜像
```



```sh
docker run -d -p 8001:8080  机构/镜像名<:tags>  # 创建一个容器 # 将电脑的8001端口映射到docker容器的8080端口  
```

就可以localhost:8001/docker-web/index.html 访问镜像中tomcat

```sh
docker exec -it 容器id  /bin/bash
```





### 构建cuda镜像

```sh
# 安装vim
apt-get install vim

#备份源
cp  /etc/apt/sources.list  /etc/apt/sources.list.backup
#更新源
vim /etc/apt/resources.list
替换为：
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse

# 预发布软件源，不建议启用
# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse

保存退出


apt update
apt-get update

# ========================
# tools
# ------------------------
apt-get install -y --no-install-recommends \
		build-essential \
        apt-utils \
        ca-certificates \
        wget \
        git \
        nano \
        vim \
        libssl-dev \
        curl \
        openssh-server \
        unzip \
        unrar \
      
#make
git clone --depth 10 https://github.com/Kitware/CMake ~/cmake && \
    cd ~/cmake && \
    ./bootstrap && \
    make -j"$(nproc)" install 
    
#安装python
RUN apt-get update && \
apt-get install -y libreadline-dev && \ 
wget https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz && \ 
tar -xvf Python-3.6.0.tgz && \ 
cd Python-3.6.0 && \ 
./configure && \ 
make && \ 
make install && \
ln -s /usr/local/bin/python3.6 /usr/local/bin/python && \
ln -s /usr/local/bin/python3.6-config  /usr/local/bin/python-config

RUN pip3 install --upgrade pip && \
    pip3 install --upgrade setuptools
    
RUN pip3 install tensorflow-gpu==1.12.0 -i https://pypi.tuna.tsinghua.edu.cn/simple


# ==================================================================
# config & cleanup
# ------------------------------------------------------------------

RUN   ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/* ~/*  && \
    rm -R /Python-3.6.0 && \
    rm /Python-3.6.0.tgz


EXPOSE 8888 6006
```

cuda安装

```sh
wget http://developer.download.nvidia.com/compute/cuda/10.1/Prod/local_installers/cuda_10.1.243_418.87.00_linux.run
sudo sh cuda_10.1.243_418.87.00_linux.run

wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux
sudo sh cuda_10.0.130_410.48_linux.run
```

更换pip源

